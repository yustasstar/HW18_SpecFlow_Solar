// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace HW18_SpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Shop")]
    [NUnit.Framework.CategoryAttribute("PageSetup")]
    public partial class ShopFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = new string[] {
                "PageSetup"};
        
#line 1 "Shop.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Shop", "As a User, \r\nI want to filter products by values,\r\nI should br able to add items " +
                    "to the cart, \r\nand remove added items from the cart.", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify Filter works:")]
        [NUnit.Framework.TestCaseAttribute("solar-panels", "Сонячні панелі", "Abi-Solar", null)]
        [NUnit.Framework.TestCaseAttribute("solar-panels", "Сонячні панелі", "Полікристал", null)]
        [NUnit.Framework.TestCaseAttribute("solar-panels", "Сонячні панелі", "72", null)]
        [NUnit.Framework.TestCaseAttribute("inverters", "Сонячні інвертори", "Huawei", null)]
        [NUnit.Framework.TestCaseAttribute("inverters", "Сонячні інвертори", "Гібридний", null)]
        [NUnit.Framework.TestCaseAttribute("batteries", "Акумулятори", "AXIOMA", null)]
        [NUnit.Framework.TestCaseAttribute("batteries", "Акумулятори", "Літієвий", null)]
        [NUnit.Framework.TestCaseAttribute("batteries", "Акумулятори", "12В", null)]
        [NUnit.Framework.TestCaseAttribute("charge-controllers", "Контролери заряду", "150В", null)]
        [NUnit.Framework.TestCaseAttribute("mounting-systems", "Системи кріплення", "Покрівля", null)]
        [NUnit.Framework.TestCaseAttribute("mounting-systems", "Системи кріплення", "Бітумна черепиця", null)]
        public void VerifyFilterWorks(string tab, string pageHeading, string filterValue, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Tab", tab);
            argumentsOfScenario.Add("Page Heading", pageHeading);
            argumentsOfScenario.Add("Filter Value", filterValue);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Verify Filter works:", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 15
 testRunner.Given(string.Format("I am on \'{0}\' page", tab), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 17
 testRunner.When(string.Format("I see \'{0}\'", pageHeading), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 19
 testRunner.Then(string.Format("I see filter works by \'{0}\'", filterValue), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
